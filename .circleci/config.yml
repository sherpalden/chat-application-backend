version: 2.1
# jobs
jobs:
  build:
    # circleci executor
    docker:
      - image: cimg/node:14.16.1

      - image: circleci/mongo:3-xenial-ram
        environment:
          MONGO_INITDB_ROOT_USERNAME: sherpalden
          MONGO_INITDB_ROOT_PASSWORD: Password_123
    
    # parallelism for job
    parallelism: 1

    # go convention
    working_directory: /chat-backend

    steps:
      - checkout 

      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
        
        # terminal excess
      - run:
          name: Waiting for MYSQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      
      - run:
          name: Build repo
          command: |
            go build main.go
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "go/pkg/mod"
      
      # locally run inside container  [if mentioned use env  else override from initialized env]
      - run:
          name: Start the service
          environment:
            DBHost: "localhost"
            DBPort: "3306"
            DBName: "digital_signature"
            DBUsername: "root"
            DBPassword: "password"
            Environment: "local"
          command: ./main
          background: true
      
      - run:
          name: Validate if the service is working or not.
          command: |
            sleep 5
            curl http://localhost:8080/health-check
      
      - slack/status:
          channel: ${SLACK_CHANNEL}
          webhook: ${SLACK_WEBHOOK}
          failure_message: ':red_circle: A $CIRCLE_JOB job has failed!'

      - slack/notify-on-failure:
        only_for_branches: master

  # deploy to development
  deploy_to_develop:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout

      - run:
          name: Initialize the environment variable file
          command: |
            echo "Environment=$Environment
            LogOutput=$LogOutput
            DBHost=$DBHost
            DBPort=$DBPort
            DBName=$DBName
            DBUsername=$DBUsername
            DBPassword=$DBPassword
            MailClientID=$MailClientID
            MailClientSecret=$MailClientSecret
            MailAccessToken=$MailAccessToken
            AdminURI=$AdminURI
            ClientURI=$ClientURI
            MailTokenType=$MailTokenType
            StorageBucketName=$StorageBucketName" > .env
      
      - run:
          name: Initialize firebase service account key file
          command: |
            echo "{
              \"type\": \"$TYPE_SERVICE_ACCOUNT_KEY\", \"project_id\": \"$PROJECT_ID_SERVICE_ACCOUNT_KEY\", \"private_key_id\": \"$PRIVATE_KEY_ID_SERVICE_ACCOUNT_KEY\",\"private_key\": \"$PRIVATE_KEY_SERVICE_ACCOUNT_KEY\",\"client_email\": \"$CLIENT_EMAIL_SERVICE_ACCOUNT_KEY\",\"client_id\": \"$CLIENT_ID_SERVICE_ACCOUNT_KEY\",\"auth_uri\": \"$AUTH_URL_SERVICE_ACCOUNT_KEY\",\"token_uri\": \"$TOKEN_URI_SERVICE_ACCOUNT_KEY\",\"auth_provider_x509_cert_url\": \"$AUTH_PROVIDER_X509_CERT_URL_SERVICE_ACCOUNT_KEY\",\"client_x509_cert_url\": \"$CLIENT_X509_CERT_URL_SERVICE_ACCOUNT_KEY\"
            }" > serviceAccountKey.json
      
      # authentication to the 
      - run:
          name: Authenticating and configuring the Google Cloud Platform
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCLOUD_ZONE}
      
      - deploy:
          name: Deploy to Google App Engine
          command: |
            gcloud app deploy --project $GCLOUD_PROJECT_ID
      - slack/status:
          channel: ${SLACK_CHANNEL}
          webhook: ${SLACK_WEBHOOK}
          failure_message: ':red_circle: A $CIRCLE_JOB job has failed!'

      - slack/notify-on-failure:
        only_for_branches: master

orbs:
  slack: circleci/slack@3.4.2

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          # use context from organisation context
          context: digital_sign_api_development
          filters:
            branches:
              only:
                - develop
                - master
                - /DIG-.*/

      - deploy_to_develop:
          context: digital_sign_api_development
          filters:
            branches:
              only:
                - develop
          requires:
            - build